countData <- countData[rownames(metaDataFilt),] # re-align in case
mlDataY <- metaDataFilt
mlDataX <- countData
# Use cross-validation:
trainX <- mlDataX
trainY <- mlDataY[,"predY"]
print(table(trainY))
set.seed(numSeed) # have to restate seed again,
# as ctrl defines the cross validation sampling during training
ctrl <- trainControl(method = "repeatedcv",
number = numKFold,
repeats = numResampleIter,
sampling = "up",
summaryFunction = multiClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
allowParallel=TRUE)
print("Now training model...")
set.seed(numSeed)
mlModel <- train(x = trainX,
y = trainY,
method = modelType,
# preProcess = c("zv"), # remove zero variance features
nthread = 1,
trControl = trainControl(method = "repeatedcv",
number = numKFold,
repeats = numResampleIter,
sampling = "up",
summaryFunction = multiClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
allowParallel=TRUE),
# metric = "ROC",
tuneGrid = xgbGrid,
verbose = FALSE)
resPredFun <- function(mlModel){
resPred <- mlModel$pred
## Split folds and calculate perf on each fold
resPredSplit <- split(resPred, resPred$Resample)
repX_perf <- list()
for(zz in seq_along(resPredSplit)){
resPredSingleRep <- resPredSplit[[zz]]
predProbs <- resPredSingleRep
multiClass <- resPredSingleRep
rep_perfTmp <- multiClassSummary(multiClass, lev = levels(multiClass$obs))
repX_perf[[zz]] <- data.frame(as.list(rep_perfTmp))
}
# SUMMARIZE MODEL PERFORMANCES
rep_perf <- do.call(rbind, repX_perf)
# print(rep_perf)
return(rep_perf)
}
print("Obtaining performance values...")
resPredAll <- mlModel$pred
perfCombinedAll <-  multiClassSummary(resPredAll, lev = levels(resPredAll$obs))
repPerfCombinedAll <- resPredFun(mlModel)
## Save predictions and perf
# Preds
baseFilename <- paste0("multiclassCV_",st,"_",sc,"_k",numKFold,"_modelType_",modelType)
write.csv(resPredAll, file = paste0("ML_results/pred",baseFilename,".csv"))
save(resPredAll, file = paste0("ML_results/pred",baseFilename,".RData"))
# Overall perf
write.csv(perfCombinedAll, file = paste0("ML_results/perfCombinedAll",baseFilename,".csv"))
save(perfCombinedAll, file = paste0("ML_results/perfCombinedAll",baseFilename,".RData"))
# Rep perf
write.csv(resPredAll, file = paste0("ML_results/repPerfCombinedAll",baseFilename,".csv"))
save(resPredAll, file = paste0("ML_results/repPerfCombinedAll",baseFilename,".RData"))
rm(mlModel)
res <- list(resPredAll=resPredAll,
perfCombinedAll=perfCombinedAll,
repPerfCombinedAll=repPerfCombinedAll)
return(res)
}
mlMulticlass()
#----------------------------------------------------------#
# PT multi-class machine learning
#
# NOTE: Since HMS is the only seqcenter that had 3 cancer types,
# it will be the only multi-class ML instance
#----------------------------------------------------------#
require(tidyr)
detach("package:tidyr", unload = TRUE)
## Write ML function
mlMulticlass <- function(metaData = metadataSamplesMerged_PT_HMS,
countData = countMerged_PT_HMS,
sampleType = "Primary Tumor",
seqCenter = "Harvard Medical School",
modelType = "xgbTree",
numResampleIter = 1,
numKFold = 10){
st <- gsub('([[:punct:]])|\\s+','',sampleType)
sc <- gsub('([[:punct:]])|\\s+','',seqCenter)
numSeed <- 42
xgbGrid <- data.frame(nrounds = 10,
max_depth = 4,
eta = .1,
gamma = 0,
colsample_bytree = .7,
min_child_weight = 1,
subsample = .8)
metaDataFilt <- metaData %>% column_to_rownames("sampleid")
metaDataFilt$predY <- factor(gsub("^TCGA-","",metaDataFilt$investigation))
countData <- countData[rownames(metaDataFilt),] # re-align in case
mlDataY <- metaDataFilt
mlDataX <- countData
# Use cross-validation:
trainX <- mlDataX
trainY <- mlDataY[,"predY"]
print(table(trainY))
set.seed(numSeed) # have to restate seed again,
# as ctrl defines the cross validation sampling during training
ctrl <- trainControl(method = "repeatedcv",
number = numKFold,
repeats = numResampleIter,
sampling = "up",
summaryFunction = multiClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
allowParallel=TRUE)
print("Now training model...")
set.seed(numSeed)
mlModel <- train(x = trainX,
y = trainY,
method = modelType,
# preProcess = c("zv"), # remove zero variance features
nthread = 1,
trControl = trainControl(method = "repeatedcv",
number = numKFold,
repeats = numResampleIter,
sampling = "up",
summaryFunction = multiClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
allowParallel=TRUE),
# metric = "ROC",
tuneGrid = xgbGrid,
verbose = FALSE)
resPredFun <- function(mlModel){
resPred <- mlModel$pred
## Split folds and calculate perf on each fold
resPredSplit <- split(resPred, resPred$Resample)
repX_perf <- list()
for(zz in seq_along(resPredSplit)){
resPredSingleRep <- resPredSplit[[zz]]
predProbs <- resPredSingleRep
multiClass <- resPredSingleRep
rep_perfTmp <- multiClassSummary(multiClass, lev = levels(multiClass$obs))
repX_perf[[zz]] <- data.frame(as.list(rep_perfTmp))
}
# SUMMARIZE MODEL PERFORMANCES
rep_perf <- do.call(rbind, repX_perf)
# print(rep_perf)
return(rep_perf)
}
print("Obtaining performance values...")
resPredAll <- mlModel$pred
perfCombinedAll <-  multiClassSummary(resPredAll, lev = levels(resPredAll$obs))
repPerfCombinedAll <- resPredFun(mlModel)
## Save predictions and perf
# Preds
baseFilename <- paste0("multiclassCV_",st,"_",sc,"_k",numKFold,"_modelType_",modelType)
write.csv(resPredAll, file = paste0("ML_results/pred",baseFilename,".csv"))
save(resPredAll, file = paste0("ML_results/pred",baseFilename,".RData"))
# Overall perf
write.csv(perfCombinedAll, file = paste0("ML_results/perfCombinedAll",baseFilename,".csv"))
save(perfCombinedAll, file = paste0("ML_results/perfCombinedAll",baseFilename,".RData"))
# Rep perf
write.csv(resPredAll, file = paste0("ML_results/repPerfCombinedAll",baseFilename,".csv"))
save(resPredAll, file = paste0("ML_results/repPerfCombinedAll",baseFilename,".RData"))
rm(mlModel)
res <- list(resPredAll=resPredAll,
perfCombinedAll=perfCombinedAll,
repPerfCombinedAll=repPerfCombinedAll)
return(res)
}
mlMulticlass()
# Call multiclass function
hmsMulticlassMLRes <- mlMulticlass()
hmsMulticlassMLRes$perfCombinedAll
hmsMulticlassMLRes$repPerfCombinedAll
# Examine overall performance:
hmsMulticlassMLRes$perfCombinedAll
head(hmsMulticlassMLRes$resPredAll)
dim(hmsMulticlassMLRes)
dim(hmsMulticlassMLRes$resPredAll)
# Create confusion matrix
caret::confusionMatrix(hmsMulticlassMLRes$resPredAll)
?confusionMatrix
# Create confusion matrix
caret::confusionMatrix(hmsMulticlassMLRes$resPredAll$pred,
hmsMulticlassMLRes$resPredAll$obs)
# Call multiclass function
hmsMulticlassMLRes_PT <- mlMulticlass()
# Call multiclass function
hmsMulticlassMLRes_BDN <- mlMulticlass(metaData = metadataSamplesMerged_BDN_HMS,
countData = countMerged_BDN_HMS,
sampleType = "Blood Derived Normal",
seqCenter = "Harvard Medical School",
modelType = "xgbTree",
numResampleIter = 1,
numKFold = 10)
# Examine overall performance:
hmsMulticlassMLRes_BDN$perfCombinedAll
# Examine per-CV performance:
hmsMulticlassMLRes_BDN$repPerfCombinedAll
# Create confusion matrix
caret::confusionMatrix(hmsMulticlassMLRes_BDN$resPredAll$pred,
hmsMulticlassMLRes_BDN$resPredAll$obs)
## Primary tumors
# HMS
alphaDivShannon_HMS_PT <- read.csv("Qiime/core_metrics_pt_hms/shannon_vector_significance_raw_values.csv",
stringsAsFactors = FALSE, comment.char = "#")
head(alphaDivShannon_HMS_PT)
alphaDivShannon_HMS_PT$investigation <- gsub("^TCGA\\-","",alphaDivShannon_HMS_PT$investigation)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") + theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_igv() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.9) +
stat_n_text()
require(ggpubr)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_igv() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.9) +
stat_n_text()
?stat_n_text
??stat_n_text
EnvStats
require(EnvStats)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_igv() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.9) +
stat_n_text()
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.9) +
stat_n_text()
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 0.9) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 1.1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
##------------BDN------------##
# HMS
alphaDivShannon_HMS_BDN <- read.csv("Qiime/core_metrics_bdn_hms/shannon_vector_significance_raw_values.csv",
stringsAsFactors = FALSE, comment.char = "#")
alphaDivShannon_HMS_BDN$investigation <- gsub("^TCGA\\-","",alphaDivShannon_HMS_BDN$investigation)
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
ggbeeswarm::geom_beeswarm() +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
ggbeeswarm::geom_beeswarm() +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
ggbeeswarm::geom_quasirandom() +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
ggbeeswarm::geom_quasirandom(method = "smiley") +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
ggbeeswarm::geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 3)
require(ggbeeswarm)
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("TCGA cancer type (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Primary tumors (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
##------------BDN------------##
# HMS
alphaDivShannon_HMS_BDN <- read.csv("Qiime/core_metrics_bdn_hms/shannon_vector_significance_raw_values.csv",
stringsAsFactors = FALSE, comment.char = "#")
alphaDivShannon_HMS_BDN$investigation <- gsub("^TCGA\\-","",alphaDivShannon_HMS_BDN$investigation)
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Blood samples (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(30) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Create confusion matrix
caret::confusionMatrix(hmsMulticlassMLRes_PT$resPredAll$pred,
hmsMulticlassMLRes_PT$resPredAll$obs)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Primary tumors (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(0) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
##------------BDN------------##
# HMS
alphaDivShannon_HMS_BDN <- read.csv("Qiime/core_metrics_bdn_hms/shannon_vector_significance_raw_values.csv",
stringsAsFactors = FALSE, comment.char = "#")
alphaDivShannon_HMS_BDN$investigation <- gsub("^TCGA\\-","",alphaDivShannon_HMS_BDN$investigation)
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Blood samples (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(0) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Plot
alphaDivShannon_HMS_PT %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Primary tumors (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(0) +
scale_fill_nejm() +
stat_compare_means(label.x.npc = 0.1, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_PT.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
?pal_nejm
library("scales")
show_col(pal_nejm("default")(8))
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Blood samples (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(0) +
scale_fill_manual(values = c("#0072B5FF","#BC3C29FF")) +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
# Plot
alphaDivShannon_HMS_BDN %>%
ggplot(aes(reorder(investigation, shannon_entropy, FUN=median), shannon_entropy, fill=investigation)) +
geom_boxplot() + xlab("Blood samples (HMS)") + ylab("Shannon Entropy") +
geom_quasirandom(method = "smiley", size=0.8) +
theme_pubr(legend = "none") +
rotate_x_text(0) +
scale_fill_manual(values = c("#0072B5FF","#E18727FF")) +
stat_compare_means(label.x.npc = 0, label.y.npc = 1) +
stat_n_text()
ggsave(filename = "Figures/alphaDivShannonPlot_HMS_BDN.jpeg",
dpi = "retina", units = "in", height = 4, width = 2.5)
metadataSamplesMerged %>% count(data_submitting_center_label)
dim(metadataSamplesMerged)
